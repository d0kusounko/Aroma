//===========================================================================
//!
//!	@file		RefObject.h
//!	@brief		参照カウンター付きベースオブジェクト.
//!
//!	@author		Copyright (C) DebugCurry. All rights reserved.
//!	@author		d0
//!
//===========================================================================
#pragma once

#include <atomic>
#include <list>
#include "Typedef.h"

namespace aroma
{

//---------------------------------------------------------------------------
//!	@brief		参照カウンター付きベースオブジェクト.
//---------------------------------------------------------------------------
class RefObject
{
public:
	RefObject();
	virtual ~RefObject();

	//-----------------------------------------------------------------------
	//!	@brief		解放（参照カウンターを1減少).
	//!
	//!	@return		減少後の参照カウント値.
	//! @note		カウンターが0になったら解放処理を行います.
	//-----------------------------------------------------------------------
	s32 Release();

	//-----------------------------------------------------------------------
	//!	@brief		参照カウンタを1増加.
	//!
	//!	@return		増加後の参照カウント値.
	//-----------------------------------------------------------------------
	s32 AddRef();

	//-----------------------------------------------------------------------
	//!	@brief		参照カウントを取得.
	//!
	//!	@return		参照カウント数.
	//-----------------------------------------------------------------------
	s32 GetCount() const;

private:
	volatile std::atomic< s32 >	_refCount;	//!< 参照カウント.
};

#ifdef AROMA_DEBUG
class RefObjectManager final
{
	friend RefObject;
public:
	//-----------------------------------------------------------------------
	//!	@brief		全RefObjectインスタンスの参照カウントをデバッグ出力.
	//-----------------------------------------------------------------------
	static void Dump();

private:
	static void AddObj( RefObject* obj );
	static void DelObj( RefObject* obj );
	static std::list< RefObject* > _objs;
};
#endif

} // namespace aroma
