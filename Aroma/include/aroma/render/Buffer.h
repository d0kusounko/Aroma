//===========================================================================
//!
//!	@file		Buffer.h
//!	@brief		GPUバッファ.
//!
//!	@author		Copyright (C) DebugCurry. All rights reserved.
//!	@author		d0
//!
//===========================================================================
#pragma once

#include "Resource.h"

namespace aroma {
namespace render {

class Device;

//---------------------------------------------------------------------------
//!	@brief	GPUバッファ.
//---------------------------------------------------------------------------
class Buffer : public IResource
{
public:
	//-----------------------------------------------------------------------
	//! @brief		構成設定.
	//-----------------------------------------------------------------------
	struct Desc
	{
		size_t					size;			//!< バッファのサイズ.
		Usage					usage;			//!< バッファーで想定されている読み書きの用途.
		u32						bindFlags;		//!< バインドするパイプライン : BindFlagの組み合わせ.
		SubResource				initData;		//!< 初期データ定義.
		size_t					stride;			//!< 構造化バッファの場合は構造体サイズ.
		u32						flags;			//!< その他のオプションフラグ.
		//-------------------------------------------------------------------
		Desc(){ Default(); }
		void Default()
		{
			size			= 0;
			usage			= Usage::kDefault;
			bindFlags		= 0;
			initData.Clear();
			flags			= 0;
			stride			= 0;
		}
	};

public:
	//-----------------------------------------------------------------------
	//! @brief		コンストラクタ.
	//-----------------------------------------------------------------------
	Buffer();

	//-----------------------------------------------------------------------
	//!	@brief		デストラクタ.
	//-----------------------------------------------------------------------
	virtual ~Buffer();

	//-----------------------------------------------------------------------
	//! @brief		初期化.
	//-----------------------------------------------------------------------
	void Initialize( Device* device, const Desc& config );

	//-----------------------------------------------------------------------
	//!	@brief		解放
	//-----------------------------------------------------------------------
	void Finalize();

	//-----------------------------------------------------------------------
	//! @brief		メモリマッピング.
	//-----------------------------------------------------------------------
	void* Map() override;

	//-----------------------------------------------------------------------
	//! @brief		メモリマッピング解除.
	//-----------------------------------------------------------------------
	void Unmap() override;

	//-----------------------------------------------------------------------
	//!	@brief		構成設定取得.
	//-----------------------------------------------------------------------
	const Desc& GetDesc() const;

	//-----------------------------------------------------------------------
	//!	@brief		ネイティブAPIバッファーの取得.
	//-----------------------------------------------------------------------
#ifdef AROMA_RENDER_DX11
	ID3D11Buffer* GetNativeBuffer() const;
#endif

protected:
	bool				_initialized;
	Device*				_device;
	Desc		_desc;

#ifdef AROMA_RENDER_DX11
	ID3D11Buffer*		_nativeBuffer;
#endif
};

} // namespace render
} // namespace aroma
