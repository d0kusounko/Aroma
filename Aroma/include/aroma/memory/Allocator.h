//===========================================================================
//!
//!	@file		Allocator.h
//!	@brief		メモリアロケーター.
//!
//!	@author		Copyright (C) DebugCurry. All rights reserved.
//!	@author		d0
//!
//===========================================================================
#pragma once

#include "../common/Typedef.h"

namespace aroma {
namespace memory {

//---------------------------------------------------------------------------
//! @brief		メモリアロケータインタフェース.
//---------------------------------------------------------------------------
struct IAllocator
{
	//-----------------------------------------------------------------------
	//! @brief		デストラクタ.
	//-----------------------------------------------------------------------
	virtual ~IAllocator(){}

	//-----------------------------------------------------------------------
	//! @brief		メモリーの確保.
	//-----------------------------------------------------------------------
	virtual void* Alloc( size_t size, size_t alignment ) noexcept = 0;

	//-----------------------------------------------------------------------
	//! @brief		メモリーの再確保.
	//-----------------------------------------------------------------------
	virtual void* Realloc( void* addr, size_t newSize ) noexcept = 0;

	//-----------------------------------------------------------------------
	//! @brief		メモリーの解放.
	//-----------------------------------------------------------------------
	virtual void Free( void* addr ) noexcept = 0;
};

//---------------------------------------------------------------------------
// @brief		メモリを0クリア.
//---------------------------------------------------------------------------
template< typename T > void* Clear( T& buf ) { return memset( &buf, 0, sizeof( T ) ); }
inline void* Clear( void* p, size_t size ) { return memset( p, 0, size ); }

//---------------------------------------------------------------------------
// @brief		メモリーの安全な解放.
//---------------------------------------------------------------------------
template <typename T>
void SafeFree( T*& p )
{
	if( p )
	{
		free( p );
		p = nullptr;
	}
}

//---------------------------------------------------------------------------
// @brief		オブジェクトの安全な解放.
//---------------------------------------------------------------------------
template <typename T>
void SafeDelete( T*& p )
{
	if( p )
	{
		delete p;
		p = nullptr;
	}
}

//---------------------------------------------------------------------------
// @brief		オブジェクト配列の安全な解放.
//---------------------------------------------------------------------------
template <typename T>
void SafeDeleteArray( T*& p )
{
	if (p)
	{
		delete[] p;
		p = nullptr;
	}
}

//---------------------------------------------------------------------------
// @brief Release対応オブジェクトの安全な解放.
//---------------------------------------------------------------------------
template <typename T>
void SafeRelease( T*& p )
{
	if( p )
	{
		p->Release();
		p = nullptr;
	}
}

} // namespace memory
} // namespace aroma

